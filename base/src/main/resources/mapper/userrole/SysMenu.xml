<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mingyue.userrole.dao.SysMenuDao">
    <!--namespace根据自己需要创建的的mapper的路径和名称填写-->


    <sql id="allFields">
        uuid,
        `role_type` as roleType,
        `path`,
        `name`,
        component,
        code,
        url_level as urlLevel,
        father_id as fatherId,
        is_all_menu as isAllMenu,
        delete_status as deleteStatus,
        status,
		created_by as createdBy,
		updated_by as updatedBy,
		updated_date as updatedDate,
		created_date as createdDate,
        name_cn as nameCn
    </sql>

    <sql id="whereClause">
        <if test="id != null">
            id = #{id}
        </if>
        <if test="roleType != null">
            and `role_type` = #{roleType}
        </if>
        <if test="path != null">
            and `path` = #{path}
        </if>
        <if test="name != null">
            and `name` = #{name}
        </if>

        <if test="component != null">
            and `component` = #{component}
        </if>
        <if test="code != null">
            and `code` = #{code}
        </if>
        <if test="fatherId != null">
            and `father_id` = #{fatherId}
        </if>
        <if test="isAllMenu != null">
            and `is_all_menu` = #{isAllMenu}
        </if>

        <choose>
            <when test="deleteStatus != null">
                and delete_status = #{deleteStatus}
            </when>
            <otherwise>
                and delete_status = 0
            </otherwise>
        </choose>
        <choose>
            <when test="status != null">
                and status = #{status}
            </when>
            <otherwise>
                and status = 1
            </otherwise>
        </choose>
        <if test="createdBy != null">
            and created_by = #{createdBy}
        </if>
        <if test="updated_by != null">
            and updated_by = #{updated_by}
        </if>
        <if test="nameLike != null">
            and `name` like concat(#{nameLike},'%')
        </if>
        <if test="createdDate != null">
           and Date(created_date) = Date(#{createdDate})
        </if>
        <if test="nameCn != null">
            and name_cn like concat('%',#{nameCn},'%')
        </if>
    </sql>

    <sql id="setComn">
        <if test="id != null">
            id = #{id},
        </if>
        <if test="roleType != null">
            `role_type` = #{roleType},
        </if>
        <if test="path != null">
            `path` = #{path},
        </if>
        <if test="name != null">
            `name` = #{name},
        </if>

        <if test="component != null">
            `component` = #{component},
        </if>
        <if test="code != null">
            `code` = #{code},
        </if>
        <if test="fatherId != null">
            `father_id` = #{fatherId},
        </if>
        <if test="isAllMenu != null">
            `is_all_menu` = #{isAllMenu},
        </if>
        <if test="deleteStatus != null">
            delete_status = #{deleteStatus},
        </if>
        <if test="status != null">
            status = #{status},
        </if>

        <if test="createdBy != null">
            created_by = #{createdBy},
        </if>
        <if test="updated_by != null">
            updated_by = #{updated_by},
        </if>
        <if test="createdDate != null">
            created_date = #{createdDate},
        </if>
        <if test="updateDate != null">
            update_date = #{updateDate},
        </if>
        <if test="nameCn != null">
            name_cn = #{nameCn}
        </if>
    </sql>

    <sql id="sysMenuFields">
        uuid,
        `role_type`,
        `path`,
        `name`,
        component,
        code,
        url_level,
        father_id,
        is_all_menu,
        delete_status,
        status,
		created_by,
		updated_by,
		updated_date,
		created_date,
        name_cn
    </sql>


    <select id="get" parameterType="String" resultType="com.mingyue.userrole.bean.SysMenu">
        select <include refid="allFields"/>
        from sys_menu
        where uuid = #{uuid}
    </select>

    <select id="findByWhere" parameterType="Map" resultType="com.mingyue.userrole.bean.SysMenu">
        select
        <include refid="allFields"/>
        from sys_menu
        <where>
            <include refid="whereClause"/>
        </where>
    </select>

    <update id="update" parameterType="com.mingyue.userrole.bean.SysMenu">
        update sys_menu
        <set>
            <include refid="setComn"/>
        </set>
        where uuid = #{uuid}
    </update>

    <insert id="create" parameterType="com.mingyue.userrole.bean.SysMenu">
        insert into user_account (<include refid="sysMenuFields"/>)
        values (
        #{uuid},
        #{roleType},
        #{path},
        #{name},
        #{component},
        #{code},
        #{urlLevel},
        #{fatherId},
        #{isAllMenu},
        #{deleteStatus},
        #{status},
        #{createdBy},
        #{updatedBy},
        #{updatedDate},
        #{createdDate},
        #{nameCn}
        )

    </insert>


    <delete id="delete" parameterType="com.mingyue.userrole.bean.SysMenu">
        delete from sys_menu where uuid = #{uuid}
    </delete>

    <insert id="batchInsert" parameterType="list">
        insert into sys_menu (<include refid="sysMenuFields"/>)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (

            #{item.uuid},
            #{item.roleType},
            #{item.path},
            #{item.name},
            #{item.component},
            #{item.code},
            #{item.urlLevel},
            #{item.fatherId},
            #{item.isAllMenu},
            #{item.deleteStatus},
            #{item.status},
            #{item.createdBy},
            #{item.updatedBy},
            #{item.updatedDate},
            #{item.createdDate},
            #{item.nameCn}
            )
        </foreach>
    </insert>

</mapper>